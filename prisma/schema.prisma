generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  lastname  String
  firstname String
  email     String
  password  String
  role_id   Int         @default(1)
  id        String      @id @default(uuid())
  Favorite  Favorite[]
  resource  Resource[]
  role      Role        @relation(fields: [role_id], references: [id])
  toComment toComment[]
}

model Resource {
  id             Int              @id @default(autoincrement())
  content        String
  title          String
  updated_at     DateTime
  created_at     DateTime
  file           Bytes?
  type_id        Int
  status_id      Int
  reach_id       Int
  user_id        String
  CategoryFilter CategoryFilter[]
  Favorite       Favorite[] // Favorite?
  RelationFilter RelationFilter[]
  reach          Reach            @relation(fields: [reach_id], references: [id])
  status         Status           @relation(fields: [status_id], references: [id])
  type           Type             @relation(fields: [type_id], references: [id])
  user           User             @relation(fields: [user_id], references: [id])
  toComment      toComment[]
}

model Reach {
  id       Int        @id @default(autoincrement())
  value    String
  resource Resource[]
}

model Status {
  id       Int        @id @default(autoincrement())
  value    String
  resource Resource[]
}

model Role {
  id    Int    @id @default(autoincrement())
  value String @default("not_connected")
  user  User[]
}

model Comment {
  id         Int         @id @default(autoincrement())
  content    String
  created_at DateTime
  updated_at DateTime
  toComment  toComment[]
}

model Type {
  id       Int        @id @default(autoincrement())
  value    String
  resource Resource[]
}

model Relation {
  id             Int              @id @default(autoincrement())
  value          String
  RelationFilter RelationFilter[]
}

model Category {
  id             Int              @id @default(autoincrement())
  value          String
  CategoryFilter CategoryFilter[]
}

model CategoryFilter {
  id          Int      @id @default(autoincrement())
  resource_id Int
  category_id Int
  category    Category @relation(fields: [category_id], references: [id])
  resource    Resource @relation(fields: [resource_id], references: [id])
}

model RelationFilter {
  id          Int      @id @default(autoincrement())
  relation_id Int
  resource_id Int
  relation    Relation @relation(fields: [relation_id], references: [id])
  resource    Resource @relation(fields: [resource_id], references: [id])
}

model Favorite {
  user_id     String
  resource_id Int
  user        User @relation(fields: [user_id], references: [id])
  resource    Resource @relation(fields: [resource_id], references: [id])
  @@id([user_id, resource_id])
}


model toComment {
  id          Int      @id @default(autoincrement())
  resource_id Int
  user_id     String
  comment_id  Int
  comment     Comment  @relation(fields: [comment_id], references: [id])
  resource    Resource @relation(fields: [resource_id], references: [id])
  user        User     @relation(fields: [user_id], references: [id])
}
